import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

/**
 * PlatformLookup - JSON-based platform data lookup
 *
 * Replaces database-based platform lookup with a lightweight JSON file approach.
 * This eliminates native module dependencies (better-sqlite3) from the scrapers package,
 * allowing scrapers to run in any Node.js environment without ABI version concerns.
 *
 * The JSON file is generated by the Electron app before scraper execution.
 */
export class PlatformLookup {
  constructor(jsonPath = null) {
    // Default path: scrapers/data/known-platforms.json
    this.jsonPath = jsonPath || path.resolve(__dirname, '../../data/known-platforms.json');
  }

  /**
   * Get all known platforms from the JSON file
   * @returns {Promise<Array>} Array of platform objects
   */
  async getKnownPlatforms() {
    try {
      if (!fs.existsSync(this.jsonPath)) {
        console.warn(`⚠️  Platform data file not found at ${this.jsonPath}`);
        console.warn('Platform normalization will be limited.');
        return [];
      }

      const fileContent = fs.readFileSync(this.jsonPath, 'utf8');
      const data = JSON.parse(fileContent);

      if (!data.platforms || !Array.isArray(data.platforms)) {
        console.error('❌ Invalid platform data structure in JSON file');
        return [];
      }

      console.log(`✅ Loaded ${data.platforms.length} platforms from ${path.basename(this.jsonPath)}`);
      console.log(`   Data exported at: ${data.exported_at}`);

      return data.platforms;
    } catch (error) {
      console.error(`❌ Failed to load platform data: ${error.message}`);
      console.warn('Continuing without platform lookup data');
      return [];
    }
  }

  /**
   * Connect method - maintained for API compatibility with ReadOnlyDatabase
   * @returns {Promise<boolean>}
   */
  async connect() {
    // No connection needed for file-based approach
    return true;
  }

  /**
   * Close method - maintained for API compatibility with ReadOnlyDatabase
   */
  close() {
    // Nothing to close for file-based approach
  }
}
